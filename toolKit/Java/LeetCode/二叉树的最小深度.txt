*最小深度是从根节点到最近叶子节点的最短路径上的节点数量*
*叶子节点:没有左节点也没有右节点
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        if(root == null) return 0;
        if(root.left == null && root.right == null) return 1;
        if(root.left != null && root.right == null) return 1+minDepth(root.left);
        if(root.right != null && root.left == null) return 1+minDepth(root.right);
        return 1+Math.min(minDepth(root.right), minDepth(root.left));
    }
}
*首先判空，若当前结点不存在，直接返回0。
 然后看若左子结点不存在，那么对右子结点调用递归函数，并加1返回。
 反之，若右子结点不存在，那么对左子结点调用递归函数，并加1返回。
 若左右子结点都存在，则分别对左右子结点调用递归函数，将二者中的较小值加1返回即可

*判断条件可以简略优化
*class Solution {
    public int minDepth(TreeNode root) {
        if(root == null) return 0;
        if(root.left == null && root.right == null) return 1;
        if(root.right == null) return 1+minDepth(root.left);
        if(root.left == null) return 1+minDepth(root.right);
        return 1+Math.min(minDepth(root.right), minDepth(root.left));
    }
}